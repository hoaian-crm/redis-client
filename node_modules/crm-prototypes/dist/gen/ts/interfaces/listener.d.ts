import * as _m0 from "protobufjs/minimal";
import { IEvent } from "./event";
export declare const protobufPackage = "listener";
export interface IListener {
    id: number;
    name: string;
    description: string;
    event: IEvent | undefined;
}
export interface AddListenerDto {
    name: string;
    description: string;
    eventName: string;
}
export interface GetListenersByEventDto {
    eventName: string;
}
export interface GetListenersByEventResult {
    result: IListener[];
}
export declare const IListener: {
    encode(message: IListener, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): IListener;
    fromJSON(object: any): IListener;
    toJSON(message: IListener): unknown;
    create<I extends {
        id?: number;
        name?: string;
        description?: string;
        event?: {
            id?: number;
            name?: string;
            description?: string;
        };
    } & {
        id?: number;
        name?: string;
        description?: string;
        event?: {
            id?: number;
            name?: string;
            description?: string;
        } & {
            id?: number;
            name?: string;
            description?: string;
        } & { [K in Exclude<keyof I["event"], keyof IEvent>]: never; };
    } & { [K_1 in Exclude<keyof I, keyof IListener>]: never; }>(base?: I): IListener;
    fromPartial<I_1 extends {
        id?: number;
        name?: string;
        description?: string;
        event?: {
            id?: number;
            name?: string;
            description?: string;
        };
    } & {
        id?: number;
        name?: string;
        description?: string;
        event?: {
            id?: number;
            name?: string;
            description?: string;
        } & {
            id?: number;
            name?: string;
            description?: string;
        } & { [K_2 in Exclude<keyof I_1["event"], keyof IEvent>]: never; };
    } & { [K_3 in Exclude<keyof I_1, keyof IListener>]: never; }>(object: I_1): IListener;
};
export declare const AddListenerDto: {
    encode(message: AddListenerDto, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AddListenerDto;
    fromJSON(object: any): AddListenerDto;
    toJSON(message: AddListenerDto): unknown;
    create<I extends {
        name?: string;
        description?: string;
        eventName?: string;
    } & {
        name?: string;
        description?: string;
        eventName?: string;
    } & { [K in Exclude<keyof I, keyof AddListenerDto>]: never; }>(base?: I): AddListenerDto;
    fromPartial<I_1 extends {
        name?: string;
        description?: string;
        eventName?: string;
    } & {
        name?: string;
        description?: string;
        eventName?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof AddListenerDto>]: never; }>(object: I_1): AddListenerDto;
};
export declare const GetListenersByEventDto: {
    encode(message: GetListenersByEventDto, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetListenersByEventDto;
    fromJSON(object: any): GetListenersByEventDto;
    toJSON(message: GetListenersByEventDto): unknown;
    create<I extends {
        eventName?: string;
    } & {
        eventName?: string;
    } & { [K in Exclude<keyof I, "eventName">]: never; }>(base?: I): GetListenersByEventDto;
    fromPartial<I_1 extends {
        eventName?: string;
    } & {
        eventName?: string;
    } & { [K_1 in Exclude<keyof I_1, "eventName">]: never; }>(object: I_1): GetListenersByEventDto;
};
export declare const GetListenersByEventResult: {
    encode(message: GetListenersByEventResult, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetListenersByEventResult;
    fromJSON(object: any): GetListenersByEventResult;
    toJSON(message: GetListenersByEventResult): unknown;
    create<I extends {
        result?: {
            id?: number;
            name?: string;
            description?: string;
            event?: {
                id?: number;
                name?: string;
                description?: string;
            };
        }[];
    } & {
        result?: {
            id?: number;
            name?: string;
            description?: string;
            event?: {
                id?: number;
                name?: string;
                description?: string;
            };
        }[] & ({
            id?: number;
            name?: string;
            description?: string;
            event?: {
                id?: number;
                name?: string;
                description?: string;
            };
        } & {
            id?: number;
            name?: string;
            description?: string;
            event?: {
                id?: number;
                name?: string;
                description?: string;
            } & {
                id?: number;
                name?: string;
                description?: string;
            } & { [K in Exclude<keyof I["result"][number]["event"], keyof IEvent>]: never; };
        } & { [K_1 in Exclude<keyof I["result"][number], keyof IListener>]: never; })[] & { [K_2 in Exclude<keyof I["result"], keyof {
            id?: number;
            name?: string;
            description?: string;
            event?: {
                id?: number;
                name?: string;
                description?: string;
            };
        }[]>]: never; };
    } & { [K_3 in Exclude<keyof I, "result">]: never; }>(base?: I): GetListenersByEventResult;
    fromPartial<I_1 extends {
        result?: {
            id?: number;
            name?: string;
            description?: string;
            event?: {
                id?: number;
                name?: string;
                description?: string;
            };
        }[];
    } & {
        result?: {
            id?: number;
            name?: string;
            description?: string;
            event?: {
                id?: number;
                name?: string;
                description?: string;
            };
        }[] & ({
            id?: number;
            name?: string;
            description?: string;
            event?: {
                id?: number;
                name?: string;
                description?: string;
            };
        } & {
            id?: number;
            name?: string;
            description?: string;
            event?: {
                id?: number;
                name?: string;
                description?: string;
            } & {
                id?: number;
                name?: string;
                description?: string;
            } & { [K_4 in Exclude<keyof I_1["result"][number]["event"], keyof IEvent>]: never; };
        } & { [K_5 in Exclude<keyof I_1["result"][number], keyof IListener>]: never; })[] & { [K_6 in Exclude<keyof I_1["result"], keyof {
            id?: number;
            name?: string;
            description?: string;
            event?: {
                id?: number;
                name?: string;
                description?: string;
            };
        }[]>]: never; };
    } & { [K_7 in Exclude<keyof I_1, "result">]: never; }>(object: I_1): GetListenersByEventResult;
};
export interface IListenerController {
    Add(request: AddListenerDto): Promise<IListener>;
    Get(request: GetListenersByEventDto): Promise<GetListenersByEventResult>;
}
export declare const IListenerControllerServiceName = "listener.IListenerController";
export declare class IListenerControllerClientImpl implements IListenerController {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Add(request: AddListenerDto): Promise<IListener>;
    Get(request: GetListenersByEventDto): Promise<GetListenersByEventResult>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
