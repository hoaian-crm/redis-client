import * as _m0 from "protobufjs/minimal";
export declare const protobufPackage = "storage";
export interface IFile {
    content: Uint8Array;
    destination: string;
    filename: string;
}
export interface PutFileResponse {
    url: string;
}
export interface ReadFile {
    filePath: string;
}
export interface ReadFileResponse {
    content: Uint8Array;
}
export interface HealthCheckResult {
    message: string;
}
export declare const IFile: {
    encode(message: IFile, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): IFile;
    fromJSON(object: any): IFile;
    toJSON(message: IFile): unknown;
    create<I extends {
        content?: Uint8Array;
        destination?: string;
        filename?: string;
    } & {
        content?: Uint8Array;
        destination?: string;
        filename?: string;
    } & { [K in Exclude<keyof I, keyof IFile>]: never; }>(base?: I): IFile;
    fromPartial<I_1 extends {
        content?: Uint8Array;
        destination?: string;
        filename?: string;
    } & {
        content?: Uint8Array;
        destination?: string;
        filename?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof IFile>]: never; }>(object: I_1): IFile;
};
export declare const PutFileResponse: {
    encode(message: PutFileResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PutFileResponse;
    fromJSON(object: any): PutFileResponse;
    toJSON(message: PutFileResponse): unknown;
    create<I extends {
        url?: string;
    } & {
        url?: string;
    } & { [K in Exclude<keyof I, "url">]: never; }>(base?: I): PutFileResponse;
    fromPartial<I_1 extends {
        url?: string;
    } & {
        url?: string;
    } & { [K_1 in Exclude<keyof I_1, "url">]: never; }>(object: I_1): PutFileResponse;
};
export declare const ReadFile: {
    encode(message: ReadFile, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ReadFile;
    fromJSON(object: any): ReadFile;
    toJSON(message: ReadFile): unknown;
    create<I extends {
        filePath?: string;
    } & {
        filePath?: string;
    } & { [K in Exclude<keyof I, "filePath">]: never; }>(base?: I): ReadFile;
    fromPartial<I_1 extends {
        filePath?: string;
    } & {
        filePath?: string;
    } & { [K_1 in Exclude<keyof I_1, "filePath">]: never; }>(object: I_1): ReadFile;
};
export declare const ReadFileResponse: {
    encode(message: ReadFileResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ReadFileResponse;
    fromJSON(object: any): ReadFileResponse;
    toJSON(message: ReadFileResponse): unknown;
    create<I extends {
        content?: Uint8Array;
    } & {
        content?: Uint8Array;
    } & { [K in Exclude<keyof I, "content">]: never; }>(base?: I): ReadFileResponse;
    fromPartial<I_1 extends {
        content?: Uint8Array;
    } & {
        content?: Uint8Array;
    } & { [K_1 in Exclude<keyof I_1, "content">]: never; }>(object: I_1): ReadFileResponse;
};
export declare const HealthCheckResult: {
    encode(message: HealthCheckResult, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): HealthCheckResult;
    fromJSON(object: any): HealthCheckResult;
    toJSON(message: HealthCheckResult): unknown;
    create<I extends {
        message?: string;
    } & {
        message?: string;
    } & { [K in Exclude<keyof I, "message">]: never; }>(base?: I): HealthCheckResult;
    fromPartial<I_1 extends {
        message?: string;
    } & {
        message?: string;
    } & { [K_1 in Exclude<keyof I_1, "message">]: never; }>(object: I_1): HealthCheckResult;
};
export interface IStorageController {
    Put(request: IFile): Promise<PutFileResponse>;
    Read(request: ReadFile): Promise<ReadFileResponse>;
    HealthCheck(request: HealthCheckResult): Promise<HealthCheckResult>;
}
export declare const IStorageControllerServiceName = "storage.IStorageController";
export declare class IStorageControllerClientImpl implements IStorageController {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Put(request: IFile): Promise<PutFileResponse>;
    Read(request: ReadFile): Promise<ReadFileResponse>;
    HealthCheck(request: HealthCheckResult): Promise<HealthCheckResult>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
