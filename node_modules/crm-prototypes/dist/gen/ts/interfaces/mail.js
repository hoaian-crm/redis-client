"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SendMailDto_ContextEntry = exports.SendMailDto = exports.IMail = exports.protobufPackage = void 0;
/* eslint-disable */
const _m0 = __importStar(require("protobufjs/minimal"));
const Long = require("long");
exports.protobufPackage = "mail";
function createBaseIMail() {
    return { id: 0, to: "", subject: "", html: "" };
}
exports.IMail = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== 0) {
            writer.uint32(8).int64(message.id);
        }
        if (message.to !== "") {
            writer.uint32(18).string(message.to);
        }
        if (message.subject !== "") {
            writer.uint32(26).string(message.subject);
        }
        if (message.html !== "") {
            writer.uint32(34).string(message.html);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIMail();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.id = longToNumber(reader.int64());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.to = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.subject = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.html = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            to: isSet(object.to) ? globalThis.String(object.to) : "",
            subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
            html: isSet(object.html) ? globalThis.String(object.html) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.to !== "") {
            obj.to = message.to;
        }
        if (message.subject !== "") {
            obj.subject = message.subject;
        }
        if (message.html !== "") {
            obj.html = message.html;
        }
        return obj;
    },
    create(base) {
        return exports.IMail.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseIMail();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : 0;
        message.to = (_b = object.to) !== null && _b !== void 0 ? _b : "";
        message.subject = (_c = object.subject) !== null && _c !== void 0 ? _c : "";
        message.html = (_d = object.html) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseSendMailDto() {
    return { to: "", subject: "", template: "", html: "", context: {} };
}
exports.SendMailDto = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.to !== "") {
            writer.uint32(18).string(message.to);
        }
        if (message.subject !== "") {
            writer.uint32(26).string(message.subject);
        }
        if (message.template !== "") {
            writer.uint32(34).string(message.template);
        }
        if (message.html !== "") {
            writer.uint32(42).string(message.html);
        }
        Object.entries(message.context).forEach(([key, value]) => {
            exports.SendMailDto_ContextEntry.encode({ key: key, value }, writer.uint32(50).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSendMailDto();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.to = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.subject = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.template = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.html = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    const entry6 = exports.SendMailDto_ContextEntry.decode(reader, reader.uint32());
                    if (entry6.value !== undefined) {
                        message.context[entry6.key] = entry6.value;
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            to: isSet(object.to) ? globalThis.String(object.to) : "",
            subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
            template: isSet(object.template) ? globalThis.String(object.template) : "",
            html: isSet(object.html) ? globalThis.String(object.html) : "",
            context: isObject(object.context)
                ? Object.entries(object.context).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.to !== "") {
            obj.to = message.to;
        }
        if (message.subject !== "") {
            obj.subject = message.subject;
        }
        if (message.template !== "") {
            obj.template = message.template;
        }
        if (message.html !== "") {
            obj.html = message.html;
        }
        if (message.context) {
            const entries = Object.entries(message.context);
            if (entries.length > 0) {
                obj.context = {};
                entries.forEach(([k, v]) => {
                    obj.context[k] = v;
                });
            }
        }
        return obj;
    },
    create(base) {
        return exports.SendMailDto.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseSendMailDto();
        message.to = (_a = object.to) !== null && _a !== void 0 ? _a : "";
        message.subject = (_b = object.subject) !== null && _b !== void 0 ? _b : "";
        message.template = (_c = object.template) !== null && _c !== void 0 ? _c : "";
        message.html = (_d = object.html) !== null && _d !== void 0 ? _d : "";
        message.context = Object.entries((_e = object.context) !== null && _e !== void 0 ? _e : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseSendMailDto_ContextEntry() {
    return { key: "", value: "" };
}
exports.SendMailDto_ContextEntry = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSendMailDto_ContextEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.SendMailDto_ContextEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseSendMailDto_ContextEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function longToNumber(long) {
    if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
