import * as _m0 from "protobufjs/minimal";
import { SendMailDto } from "./mail";
export declare const protobufPackage = "event";
export declare enum Events {
    A = 0,
    UNRECOGNIZED = -1
}
export declare function eventsFromJSON(object: any): Events;
export declare function eventsToJSON(object: Events): string;
export interface IEvent {
    id: number;
    name: string;
    description: string;
}
export interface CreateEventDto {
    name: string;
    description: string;
}
export interface GetEventDto {
    name: string;
}
export interface EmitEventDto {
    name: string;
    payload: EmitEventDto_Payload | undefined;
}
export interface EmitEventDto_Payload {
    mail?: SendMailDto | undefined;
}
export interface EmitEventResult {
    code: number;
    message: string;
}
export declare const IEvent: {
    encode(message: IEvent, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): IEvent;
    fromJSON(object: any): IEvent;
    toJSON(message: IEvent): unknown;
    create<I extends {
        id?: number;
        name?: string;
        description?: string;
    } & {
        id?: number;
        name?: string;
        description?: string;
    } & { [K in Exclude<keyof I, keyof IEvent>]: never; }>(base?: I): IEvent;
    fromPartial<I_1 extends {
        id?: number;
        name?: string;
        description?: string;
    } & {
        id?: number;
        name?: string;
        description?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof IEvent>]: never; }>(object: I_1): IEvent;
};
export declare const CreateEventDto: {
    encode(message: CreateEventDto, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreateEventDto;
    fromJSON(object: any): CreateEventDto;
    toJSON(message: CreateEventDto): unknown;
    create<I extends {
        name?: string;
        description?: string;
    } & {
        name?: string;
        description?: string;
    } & { [K in Exclude<keyof I, keyof CreateEventDto>]: never; }>(base?: I): CreateEventDto;
    fromPartial<I_1 extends {
        name?: string;
        description?: string;
    } & {
        name?: string;
        description?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof CreateEventDto>]: never; }>(object: I_1): CreateEventDto;
};
export declare const GetEventDto: {
    encode(message: GetEventDto, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetEventDto;
    fromJSON(object: any): GetEventDto;
    toJSON(message: GetEventDto): unknown;
    create<I extends {
        name?: string;
    } & {
        name?: string;
    } & { [K in Exclude<keyof I, "name">]: never; }>(base?: I): GetEventDto;
    fromPartial<I_1 extends {
        name?: string;
    } & {
        name?: string;
    } & { [K_1 in Exclude<keyof I_1, "name">]: never; }>(object: I_1): GetEventDto;
};
export declare const EmitEventDto: {
    encode(message: EmitEventDto, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EmitEventDto;
    fromJSON(object: any): EmitEventDto;
    toJSON(message: EmitEventDto): unknown;
    create<I extends {
        name?: string;
        payload?: {
            mail?: {
                to?: string;
                subject?: string;
                template?: string;
                html?: string;
                context?: {
                    [x: string]: string;
                };
            };
        };
    } & {
        name?: string;
        payload?: {
            mail?: {
                to?: string;
                subject?: string;
                template?: string;
                html?: string;
                context?: {
                    [x: string]: string;
                };
            };
        } & {
            mail?: {
                to?: string;
                subject?: string;
                template?: string;
                html?: string;
                context?: {
                    [x: string]: string;
                };
            } & {
                to?: string;
                subject?: string;
                template?: string;
                html?: string;
                context?: {
                    [x: string]: string;
                } & {
                    [x: string]: string;
                } & { [K in Exclude<keyof I["payload"]["mail"]["context"], string | number>]: never; };
            } & { [K_1 in Exclude<keyof I["payload"]["mail"], keyof SendMailDto>]: never; };
        } & { [K_2 in Exclude<keyof I["payload"], "mail">]: never; };
    } & { [K_3 in Exclude<keyof I, keyof EmitEventDto>]: never; }>(base?: I): EmitEventDto;
    fromPartial<I_1 extends {
        name?: string;
        payload?: {
            mail?: {
                to?: string;
                subject?: string;
                template?: string;
                html?: string;
                context?: {
                    [x: string]: string;
                };
            };
        };
    } & {
        name?: string;
        payload?: {
            mail?: {
                to?: string;
                subject?: string;
                template?: string;
                html?: string;
                context?: {
                    [x: string]: string;
                };
            };
        } & {
            mail?: {
                to?: string;
                subject?: string;
                template?: string;
                html?: string;
                context?: {
                    [x: string]: string;
                };
            } & {
                to?: string;
                subject?: string;
                template?: string;
                html?: string;
                context?: {
                    [x: string]: string;
                } & {
                    [x: string]: string;
                } & { [K_4 in Exclude<keyof I_1["payload"]["mail"]["context"], string | number>]: never; };
            } & { [K_5 in Exclude<keyof I_1["payload"]["mail"], keyof SendMailDto>]: never; };
        } & { [K_6 in Exclude<keyof I_1["payload"], "mail">]: never; };
    } & { [K_7 in Exclude<keyof I_1, keyof EmitEventDto>]: never; }>(object: I_1): EmitEventDto;
};
export declare const EmitEventDto_Payload: {
    encode(message: EmitEventDto_Payload, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EmitEventDto_Payload;
    fromJSON(object: any): EmitEventDto_Payload;
    toJSON(message: EmitEventDto_Payload): unknown;
    create<I extends {
        mail?: {
            to?: string;
            subject?: string;
            template?: string;
            html?: string;
            context?: {
                [x: string]: string;
            };
        };
    } & {
        mail?: {
            to?: string;
            subject?: string;
            template?: string;
            html?: string;
            context?: {
                [x: string]: string;
            };
        } & {
            to?: string;
            subject?: string;
            template?: string;
            html?: string;
            context?: {
                [x: string]: string;
            } & {
                [x: string]: string;
            } & { [K in Exclude<keyof I["mail"]["context"], string | number>]: never; };
        } & { [K_1 in Exclude<keyof I["mail"], keyof SendMailDto>]: never; };
    } & { [K_2 in Exclude<keyof I, "mail">]: never; }>(base?: I): EmitEventDto_Payload;
    fromPartial<I_1 extends {
        mail?: {
            to?: string;
            subject?: string;
            template?: string;
            html?: string;
            context?: {
                [x: string]: string;
            };
        };
    } & {
        mail?: {
            to?: string;
            subject?: string;
            template?: string;
            html?: string;
            context?: {
                [x: string]: string;
            };
        } & {
            to?: string;
            subject?: string;
            template?: string;
            html?: string;
            context?: {
                [x: string]: string;
            } & {
                [x: string]: string;
            } & { [K_3 in Exclude<keyof I_1["mail"]["context"], string | number>]: never; };
        } & { [K_4 in Exclude<keyof I_1["mail"], keyof SendMailDto>]: never; };
    } & { [K_5 in Exclude<keyof I_1, "mail">]: never; }>(object: I_1): EmitEventDto_Payload;
};
export declare const EmitEventResult: {
    encode(message: EmitEventResult, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EmitEventResult;
    fromJSON(object: any): EmitEventResult;
    toJSON(message: EmitEventResult): unknown;
    create<I extends {
        code?: number;
        message?: string;
    } & {
        code?: number;
        message?: string;
    } & { [K in Exclude<keyof I, keyof EmitEventResult>]: never; }>(base?: I): EmitEventResult;
    fromPartial<I_1 extends {
        code?: number;
        message?: string;
    } & {
        code?: number;
        message?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof EmitEventResult>]: never; }>(object: I_1): EmitEventResult;
};
export interface IEventController {
    Create(request: CreateEventDto): Promise<IEvent>;
    Get(request: GetEventDto): Promise<IEvent>;
    Emit(request: EmitEventDto): Promise<EmitEventResult>;
}
export declare const IEventControllerServiceName = "event.IEventController";
export declare class IEventControllerClientImpl implements IEventController {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Create(request: CreateEventDto): Promise<IEvent>;
    Get(request: GetEventDto): Promise<IEvent>;
    Emit(request: EmitEventDto): Promise<EmitEventResult>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
