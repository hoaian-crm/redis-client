"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IProductControllerClientImpl = exports.IProductControllerServiceName = exports.IProductResponse = exports.IProductDetail = exports.GetProductDto = exports.protobufPackage = void 0;
/* eslint-disable */
const _m0 = __importStar(require("protobufjs/minimal"));
const Long = require("long");
exports.protobufPackage = "product";
function createBaseGetProductDto() {
    return { id: [] };
}
exports.GetProductDto = {
    encode(message, writer = _m0.Writer.create()) {
        writer.uint32(10).fork();
        for (const v of message.id) {
            writer.int64(v);
        }
        writer.ldelim();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetProductDto();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag === 8) {
                        message.id.push(longToNumber(reader.int64()));
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.id.push(longToNumber(reader.int64()));
                        }
                        continue;
                    }
                    break;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.id) ? object.id.map((e) => globalThis.Number(e)) : [] };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.id) === null || _a === void 0 ? void 0 : _a.length) {
            obj.id = message.id.map((e) => Math.round(e));
        }
        return obj;
    },
    create(base) {
        return exports.GetProductDto.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetProductDto();
        message.id = ((_a = object.id) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
function createBaseIProductDetail() {
    return { id: 0, name: "", alias: "", price: 0, discount: 0 };
}
exports.IProductDetail = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== 0) {
            writer.uint32(8).int64(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.alias !== "") {
            writer.uint32(26).string(message.alias);
        }
        if (message.price !== 0) {
            writer.uint32(32).int64(message.price);
        }
        if (message.discount !== 0) {
            writer.uint32(40).int64(message.discount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIProductDetail();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.id = longToNumber(reader.int64());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.alias = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.price = longToNumber(reader.int64());
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.discount = longToNumber(reader.int64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.Number(object.id) : 0,
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            alias: isSet(object.alias) ? globalThis.String(object.alias) : "",
            price: isSet(object.price) ? globalThis.Number(object.price) : 0,
            discount: isSet(object.discount) ? globalThis.Number(object.discount) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = Math.round(message.id);
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.alias !== "") {
            obj.alias = message.alias;
        }
        if (message.price !== 0) {
            obj.price = Math.round(message.price);
        }
        if (message.discount !== 0) {
            obj.discount = Math.round(message.discount);
        }
        return obj;
    },
    create(base) {
        return exports.IProductDetail.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseIProductDetail();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : 0;
        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : "";
        message.alias = (_c = object.alias) !== null && _c !== void 0 ? _c : "";
        message.price = (_d = object.price) !== null && _d !== void 0 ? _d : 0;
        message.discount = (_e = object.discount) !== null && _e !== void 0 ? _e : 0;
        return message;
    },
};
function createBaseIProductResponse() {
    return { products: [] };
}
exports.IProductResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.products) {
            exports.IProductDetail.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIProductResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.products.push(exports.IProductDetail.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            products: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.products)
                ? object.products.map((e) => exports.IProductDetail.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.products) === null || _a === void 0 ? void 0 : _a.length) {
            obj.products = message.products.map((e) => exports.IProductDetail.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.IProductResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseIProductResponse();
        message.products = ((_a = object.products) === null || _a === void 0 ? void 0 : _a.map((e) => exports.IProductDetail.fromPartial(e))) || [];
        return message;
    },
};
exports.IProductControllerServiceName = "product.IProductController";
class IProductControllerClientImpl {
    constructor(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || exports.IProductControllerServiceName;
        this.rpc = rpc;
        this.GetById = this.GetById.bind(this);
    }
    GetById(request) {
        const data = exports.GetProductDto.encode(request).finish();
        const promise = this.rpc.request(this.service, "GetById", data);
        return promise.then((data) => exports.IProductResponse.decode(_m0.Reader.create(data)));
    }
}
exports.IProductControllerClientImpl = IProductControllerClientImpl;
function longToNumber(long) {
    if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
