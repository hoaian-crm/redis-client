import * as _m0 from "protobufjs/minimal";
export declare const protobufPackage = "mail";
export interface IMail {
    id: number;
    /** Email to send */
    to: string;
    /** Subject of mail */
    subject: string;
    /** Html of mail */
    html: string;
}
export interface SendMailDto {
    to: string;
    subject: string;
    template: string;
    html: string;
    context: {
        [key: string]: string;
    };
}
export interface SendMailDto_ContextEntry {
    key: string;
    value: string;
}
export declare const IMail: {
    encode(message: IMail, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): IMail;
    fromJSON(object: any): IMail;
    toJSON(message: IMail): unknown;
    create<I extends {
        id?: number;
        to?: string;
        subject?: string;
        html?: string;
    } & {
        id?: number;
        to?: string;
        subject?: string;
        html?: string;
    } & { [K in Exclude<keyof I, keyof IMail>]: never; }>(base?: I): IMail;
    fromPartial<I_1 extends {
        id?: number;
        to?: string;
        subject?: string;
        html?: string;
    } & {
        id?: number;
        to?: string;
        subject?: string;
        html?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof IMail>]: never; }>(object: I_1): IMail;
};
export declare const SendMailDto: {
    encode(message: SendMailDto, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SendMailDto;
    fromJSON(object: any): SendMailDto;
    toJSON(message: SendMailDto): unknown;
    create<I extends {
        to?: string;
        subject?: string;
        template?: string;
        html?: string;
        context?: {
            [x: string]: string;
        };
    } & {
        to?: string;
        subject?: string;
        template?: string;
        html?: string;
        context?: {
            [x: string]: string;
        } & {
            [x: string]: string;
        } & { [K in Exclude<keyof I["context"], string | number>]: never; };
    } & { [K_1 in Exclude<keyof I, keyof SendMailDto>]: never; }>(base?: I): SendMailDto;
    fromPartial<I_1 extends {
        to?: string;
        subject?: string;
        template?: string;
        html?: string;
        context?: {
            [x: string]: string;
        };
    } & {
        to?: string;
        subject?: string;
        template?: string;
        html?: string;
        context?: {
            [x: string]: string;
        } & {
            [x: string]: string;
        } & { [K_2 in Exclude<keyof I_1["context"], string | number>]: never; };
    } & { [K_3 in Exclude<keyof I_1, keyof SendMailDto>]: never; }>(object: I_1): SendMailDto;
};
export declare const SendMailDto_ContextEntry: {
    encode(message: SendMailDto_ContextEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SendMailDto_ContextEntry;
    fromJSON(object: any): SendMailDto_ContextEntry;
    toJSON(message: SendMailDto_ContextEntry): unknown;
    create<I extends {
        key?: string;
        value?: string;
    } & {
        key?: string;
        value?: string;
    } & { [K in Exclude<keyof I, keyof SendMailDto_ContextEntry>]: never; }>(base?: I): SendMailDto_ContextEntry;
    fromPartial<I_1 extends {
        key?: string;
        value?: string;
    } & {
        key?: string;
        value?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof SendMailDto_ContextEntry>]: never; }>(object: I_1): SendMailDto_ContextEntry;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
