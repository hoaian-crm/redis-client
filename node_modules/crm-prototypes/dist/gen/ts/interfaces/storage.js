"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IStorageControllerClientImpl = exports.IStorageControllerServiceName = exports.HealthCheckResult = exports.ReadFileResponse = exports.ReadFile = exports.PutFileResponse = exports.IFile = exports.protobufPackage = void 0;
/* eslint-disable */
const _m0 = __importStar(require("protobufjs/minimal"));
exports.protobufPackage = "storage";
function createBaseIFile() {
    return { content: new Uint8Array(0), destination: "", filename: "" };
}
exports.IFile = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.content.length !== 0) {
            writer.uint32(10).bytes(message.content);
        }
        if (message.destination !== "") {
            writer.uint32(18).string(message.destination);
        }
        if (message.filename !== "") {
            writer.uint32(26).string(message.filename);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIFile();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.content = reader.bytes();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.destination = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.filename = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            content: isSet(object.content) ? bytesFromBase64(object.content) : new Uint8Array(0),
            destination: isSet(object.destination) ? globalThis.String(object.destination) : "",
            filename: isSet(object.filename) ? globalThis.String(object.filename) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.content.length !== 0) {
            obj.content = base64FromBytes(message.content);
        }
        if (message.destination !== "") {
            obj.destination = message.destination;
        }
        if (message.filename !== "") {
            obj.filename = message.filename;
        }
        return obj;
    },
    create(base) {
        return exports.IFile.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseIFile();
        message.content = (_a = object.content) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        message.destination = (_b = object.destination) !== null && _b !== void 0 ? _b : "";
        message.filename = (_c = object.filename) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBasePutFileResponse() {
    return { url: "" };
}
exports.PutFileResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.url !== "") {
            writer.uint32(10).string(message.url);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePutFileResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { url: isSet(object.url) ? globalThis.String(object.url) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.url !== "") {
            obj.url = message.url;
        }
        return obj;
    },
    create(base) {
        return exports.PutFileResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBasePutFileResponse();
        message.url = (_a = object.url) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseReadFile() {
    return { filePath: "" };
}
exports.ReadFile = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.filePath !== "") {
            writer.uint32(10).string(message.filePath);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseReadFile();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.filePath = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { filePath: isSet(object.filePath) ? globalThis.String(object.filePath) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.filePath !== "") {
            obj.filePath = message.filePath;
        }
        return obj;
    },
    create(base) {
        return exports.ReadFile.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseReadFile();
        message.filePath = (_a = object.filePath) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseReadFileResponse() {
    return { content: new Uint8Array(0) };
}
exports.ReadFileResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.content.length !== 0) {
            writer.uint32(10).bytes(message.content);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseReadFileResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.content = reader.bytes();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { content: isSet(object.content) ? bytesFromBase64(object.content) : new Uint8Array(0) };
    },
    toJSON(message) {
        const obj = {};
        if (message.content.length !== 0) {
            obj.content = base64FromBytes(message.content);
        }
        return obj;
    },
    create(base) {
        return exports.ReadFileResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseReadFileResponse();
        message.content = (_a = object.content) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        return message;
    },
};
function createBaseHealthCheckResult() {
    return { message: "" };
}
exports.HealthCheckResult = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.message !== "") {
            writer.uint32(10).string(message.message);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHealthCheckResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.message = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.message !== "") {
            obj.message = message.message;
        }
        return obj;
    },
    create(base) {
        return exports.HealthCheckResult.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseHealthCheckResult();
        message.message = (_a = object.message) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
exports.IStorageControllerServiceName = "storage.IStorageController";
class IStorageControllerClientImpl {
    constructor(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || exports.IStorageControllerServiceName;
        this.rpc = rpc;
        this.Put = this.Put.bind(this);
        this.Read = this.Read.bind(this);
        this.HealthCheck = this.HealthCheck.bind(this);
    }
    Put(request) {
        const data = exports.IFile.encode(request).finish();
        const promise = this.rpc.request(this.service, "Put", data);
        return promise.then((data) => exports.PutFileResponse.decode(_m0.Reader.create(data)));
    }
    Read(request) {
        const data = exports.ReadFile.encode(request).finish();
        const promise = this.rpc.request(this.service, "Read", data);
        return promise.then((data) => exports.ReadFileResponse.decode(_m0.Reader.create(data)));
    }
    HealthCheck(request) {
        const data = exports.HealthCheckResult.encode(request).finish();
        const promise = this.rpc.request(this.service, "HealthCheck", data);
        return promise.then((data) => exports.HealthCheckResult.decode(_m0.Reader.create(data)));
    }
}
exports.IStorageControllerClientImpl = IStorageControllerClientImpl;
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
