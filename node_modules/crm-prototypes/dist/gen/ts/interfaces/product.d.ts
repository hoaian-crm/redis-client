import * as _m0 from "protobufjs/minimal";
export declare const protobufPackage = "product";
export interface GetProductDto {
    id: number[];
}
export interface IProductDetail {
    id: number;
    name: string;
    alias: string;
    price: number;
    discount: number;
}
export interface IProductResponse {
    products: IProductDetail[];
}
export declare const GetProductDto: {
    encode(message: GetProductDto, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetProductDto;
    fromJSON(object: any): GetProductDto;
    toJSON(message: GetProductDto): unknown;
    create<I extends {
        id?: number[];
    } & {
        id?: number[] & number[] & { [K in Exclude<keyof I["id"], keyof number[]>]: never; };
    } & { [K_1 in Exclude<keyof I, "id">]: never; }>(base?: I): GetProductDto;
    fromPartial<I_1 extends {
        id?: number[];
    } & {
        id?: number[] & number[] & { [K_2 in Exclude<keyof I_1["id"], keyof number[]>]: never; };
    } & { [K_3 in Exclude<keyof I_1, "id">]: never; }>(object: I_1): GetProductDto;
};
export declare const IProductDetail: {
    encode(message: IProductDetail, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): IProductDetail;
    fromJSON(object: any): IProductDetail;
    toJSON(message: IProductDetail): unknown;
    create<I extends {
        id?: number;
        name?: string;
        alias?: string;
        price?: number;
        discount?: number;
    } & {
        id?: number;
        name?: string;
        alias?: string;
        price?: number;
        discount?: number;
    } & { [K in Exclude<keyof I, keyof IProductDetail>]: never; }>(base?: I): IProductDetail;
    fromPartial<I_1 extends {
        id?: number;
        name?: string;
        alias?: string;
        price?: number;
        discount?: number;
    } & {
        id?: number;
        name?: string;
        alias?: string;
        price?: number;
        discount?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof IProductDetail>]: never; }>(object: I_1): IProductDetail;
};
export declare const IProductResponse: {
    encode(message: IProductResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): IProductResponse;
    fromJSON(object: any): IProductResponse;
    toJSON(message: IProductResponse): unknown;
    create<I extends {
        products?: {
            id?: number;
            name?: string;
            alias?: string;
            price?: number;
            discount?: number;
        }[];
    } & {
        products?: {
            id?: number;
            name?: string;
            alias?: string;
            price?: number;
            discount?: number;
        }[] & ({
            id?: number;
            name?: string;
            alias?: string;
            price?: number;
            discount?: number;
        } & {
            id?: number;
            name?: string;
            alias?: string;
            price?: number;
            discount?: number;
        } & { [K in Exclude<keyof I["products"][number], keyof IProductDetail>]: never; })[] & { [K_1 in Exclude<keyof I["products"], keyof {
            id?: number;
            name?: string;
            alias?: string;
            price?: number;
            discount?: number;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, "products">]: never; }>(base?: I): IProductResponse;
    fromPartial<I_1 extends {
        products?: {
            id?: number;
            name?: string;
            alias?: string;
            price?: number;
            discount?: number;
        }[];
    } & {
        products?: {
            id?: number;
            name?: string;
            alias?: string;
            price?: number;
            discount?: number;
        }[] & ({
            id?: number;
            name?: string;
            alias?: string;
            price?: number;
            discount?: number;
        } & {
            id?: number;
            name?: string;
            alias?: string;
            price?: number;
            discount?: number;
        } & { [K_3 in Exclude<keyof I_1["products"][number], keyof IProductDetail>]: never; })[] & { [K_4 in Exclude<keyof I_1["products"], keyof {
            id?: number;
            name?: string;
            alias?: string;
            price?: number;
            discount?: number;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, "products">]: never; }>(object: I_1): IProductResponse;
};
export interface IProductController {
    GetById(request: GetProductDto): Promise<IProductResponse>;
}
export declare const IProductControllerServiceName = "product.IProductController";
export declare class IProductControllerClientImpl implements IProductController {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    GetById(request: GetProductDto): Promise<IProductResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
