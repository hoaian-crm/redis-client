export type IMessage = {
    code: number | string;
    description?: string;
    field?: string;
    metaData?: string;
};
export type ResponseData<T extends any> = {
    result: T | Array<T>;
    total?: number;
};
export declare class Response<T extends any> {
    messages: Array<IMessage>;
    data: ResponseData<T>;
    static findSuccess<T extends any>([result, count]: [
        result: Array<T>,
        number
    ]): Response<T>;
    static createSuccess<T extends any>(result: T): {
        messages: {
            code: number;
            description: string;
        }[];
        data: {
            result: T;
            total: number;
        };
    };
    static createBulkSuccess<T extends any>(result: Array<T>): {
        messages: {
            code: number;
            description: string;
        }[];
        data: {
            result: T[];
            total: number;
        };
    };
    static updateSuccess<T extends any>(result: T): {
        messages: {
            code: number;
            description: string;
        }[];
        data: {
            result: T;
            total: number;
        };
    };
    static deleteSuccess<T extends any>(result: T): {
        messages: {
            code: number;
            description: string;
        }[];
        data: {
            result: any;
            total: T;
        };
    };
    static badRequestThrow(message: IMessage | Array<IMessage>): void;
}
