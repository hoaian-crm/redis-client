// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: interfaces/listener.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IListenerController_Add_FullMethodName = "/listener.IListenerController/Add"
	IListenerController_Get_FullMethodName = "/listener.IListenerController/Get"
)

// IListenerControllerClient is the client API for IListenerController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IListenerControllerClient interface {
	Add(ctx context.Context, in *AddListenerDto, opts ...grpc.CallOption) (*IListener, error)
	Get(ctx context.Context, in *GetListenersByEventDto, opts ...grpc.CallOption) (*GetListenersByEventResult, error)
}

type iListenerControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewIListenerControllerClient(cc grpc.ClientConnInterface) IListenerControllerClient {
	return &iListenerControllerClient{cc}
}

func (c *iListenerControllerClient) Add(ctx context.Context, in *AddListenerDto, opts ...grpc.CallOption) (*IListener, error) {
	out := new(IListener)
	err := c.cc.Invoke(ctx, IListenerController_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iListenerControllerClient) Get(ctx context.Context, in *GetListenersByEventDto, opts ...grpc.CallOption) (*GetListenersByEventResult, error) {
	out := new(GetListenersByEventResult)
	err := c.cc.Invoke(ctx, IListenerController_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IListenerControllerServer is the server API for IListenerController service.
// All implementations must embed UnimplementedIListenerControllerServer
// for forward compatibility
type IListenerControllerServer interface {
	Add(context.Context, *AddListenerDto) (*IListener, error)
	Get(context.Context, *GetListenersByEventDto) (*GetListenersByEventResult, error)
	mustEmbedUnimplementedIListenerControllerServer()
}

// UnimplementedIListenerControllerServer must be embedded to have forward compatible implementations.
type UnimplementedIListenerControllerServer struct {
}

func (UnimplementedIListenerControllerServer) Add(context.Context, *AddListenerDto) (*IListener, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedIListenerControllerServer) Get(context.Context, *GetListenersByEventDto) (*GetListenersByEventResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedIListenerControllerServer) mustEmbedUnimplementedIListenerControllerServer() {}

// UnsafeIListenerControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IListenerControllerServer will
// result in compilation errors.
type UnsafeIListenerControllerServer interface {
	mustEmbedUnimplementedIListenerControllerServer()
}

func RegisterIListenerControllerServer(s grpc.ServiceRegistrar, srv IListenerControllerServer) {
	s.RegisterService(&IListenerController_ServiceDesc, srv)
}

func _IListenerController_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddListenerDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IListenerControllerServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IListenerController_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IListenerControllerServer).Add(ctx, req.(*AddListenerDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _IListenerController_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListenersByEventDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IListenerControllerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IListenerController_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IListenerControllerServer).Get(ctx, req.(*GetListenersByEventDto))
	}
	return interceptor(ctx, in, info, handler)
}

// IListenerController_ServiceDesc is the grpc.ServiceDesc for IListenerController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IListenerController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "listener.IListenerController",
	HandlerType: (*IListenerControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _IListenerController_Add_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _IListenerController_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interfaces/listener.proto",
}
