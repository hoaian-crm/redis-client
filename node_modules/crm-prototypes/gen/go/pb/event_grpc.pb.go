// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: interfaces/event.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IEventController_Create_FullMethodName = "/event.IEventController/Create"
	IEventController_Get_FullMethodName    = "/event.IEventController/Get"
	IEventController_Emit_FullMethodName   = "/event.IEventController/Emit"
)

// IEventControllerClient is the client API for IEventController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IEventControllerClient interface {
	Create(ctx context.Context, in *CreateEventDto, opts ...grpc.CallOption) (*IEvent, error)
	Get(ctx context.Context, in *GetEventDto, opts ...grpc.CallOption) (*IEvent, error)
	Emit(ctx context.Context, in *EmitEventDto, opts ...grpc.CallOption) (*EmitEventResult, error)
}

type iEventControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewIEventControllerClient(cc grpc.ClientConnInterface) IEventControllerClient {
	return &iEventControllerClient{cc}
}

func (c *iEventControllerClient) Create(ctx context.Context, in *CreateEventDto, opts ...grpc.CallOption) (*IEvent, error) {
	out := new(IEvent)
	err := c.cc.Invoke(ctx, IEventController_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iEventControllerClient) Get(ctx context.Context, in *GetEventDto, opts ...grpc.CallOption) (*IEvent, error) {
	out := new(IEvent)
	err := c.cc.Invoke(ctx, IEventController_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iEventControllerClient) Emit(ctx context.Context, in *EmitEventDto, opts ...grpc.CallOption) (*EmitEventResult, error) {
	out := new(EmitEventResult)
	err := c.cc.Invoke(ctx, IEventController_Emit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IEventControllerServer is the server API for IEventController service.
// All implementations must embed UnimplementedIEventControllerServer
// for forward compatibility
type IEventControllerServer interface {
	Create(context.Context, *CreateEventDto) (*IEvent, error)
	Get(context.Context, *GetEventDto) (*IEvent, error)
	Emit(context.Context, *EmitEventDto) (*EmitEventResult, error)
	mustEmbedUnimplementedIEventControllerServer()
}

// UnimplementedIEventControllerServer must be embedded to have forward compatible implementations.
type UnimplementedIEventControllerServer struct {
}

func (UnimplementedIEventControllerServer) Create(context.Context, *CreateEventDto) (*IEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedIEventControllerServer) Get(context.Context, *GetEventDto) (*IEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedIEventControllerServer) Emit(context.Context, *EmitEventDto) (*EmitEventResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Emit not implemented")
}
func (UnimplementedIEventControllerServer) mustEmbedUnimplementedIEventControllerServer() {}

// UnsafeIEventControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IEventControllerServer will
// result in compilation errors.
type UnsafeIEventControllerServer interface {
	mustEmbedUnimplementedIEventControllerServer()
}

func RegisterIEventControllerServer(s grpc.ServiceRegistrar, srv IEventControllerServer) {
	s.RegisterService(&IEventController_ServiceDesc, srv)
}

func _IEventController_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IEventControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IEventController_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IEventControllerServer).Create(ctx, req.(*CreateEventDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _IEventController_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IEventControllerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IEventController_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IEventControllerServer).Get(ctx, req.(*GetEventDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _IEventController_Emit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmitEventDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IEventControllerServer).Emit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IEventController_Emit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IEventControllerServer).Emit(ctx, req.(*EmitEventDto))
	}
	return interceptor(ctx, in, info, handler)
}

// IEventController_ServiceDesc is the grpc.ServiceDesc for IEventController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IEventController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event.IEventController",
	HandlerType: (*IEventControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _IEventController_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _IEventController_Get_Handler,
		},
		{
			MethodName: "Emit",
			Handler:    _IEventController_Emit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interfaces/event.proto",
}
